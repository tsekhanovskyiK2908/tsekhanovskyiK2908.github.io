// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplicationTestTask.Dal.Implementation;

namespace WebApplicationTestTask.Dal.Implementation.Migrations
{
    [DbContext(typeof(OrderingSystemDbContext))]
    [Migration("20210309122435_AlterOrdersTable")]
    partial class AlterOrdersTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("WebApplicationTestTask.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "34, Hryhorenka avenue, Kyiv",
                            CreatedDate = new DateTime(2021, 3, 2, 16, 10, 0, 0, DateTimeKind.Unspecified),
                            Name = "Danylo Kozak"
                        },
                        new
                        {
                            Id = 2,
                            Address = "16, Polyarna street, Kyiv",
                            CreatedDate = new DateTime(2021, 3, 2, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Maryna Hetman"
                        },
                        new
                        {
                            Id = 3,
                            Address = "120, Peremohy avenue, Kyiv",
                            CreatedDate = new DateTime(2021, 3, 2, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Denys Ivahnenko"
                        });
                });

            modelBuilder.Entity("WebApplicationTestTask.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WebApplicationTestTask.Entities.OrderProduct", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductSize")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("WebApplicationTestTask.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AvaliableQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductCategory")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvaliableQuantity = 10,
                            CreationDate = new DateTime(2021, 2, 20, 15, 10, 0, 0, DateTimeKind.Unspecified),
                            Description = "Delicious",
                            Name = "Avocado",
                            Price = 20m,
                            ProductCategory = 1
                        },
                        new
                        {
                            Id = 2,
                            AvaliableQuantity = 30,
                            CreationDate = new DateTime(2021, 2, 20, 15, 10, 0, 0, DateTimeKind.Unspecified),
                            Description = "Really Delicious",
                            Name = "Steak",
                            Price = 200m,
                            ProductCategory = 1
                        },
                        new
                        {
                            Id = 3,
                            AvaliableQuantity = 5,
                            CreationDate = new DateTime(2021, 2, 20, 15, 10, 0, 0, DateTimeKind.Unspecified),
                            Description = "Looks good",
                            Name = "T-shirt",
                            Price = 150m,
                            ProductCategory = 2
                        });
                });

            modelBuilder.Entity("WebApplicationTestTask.Entities.Order", b =>
                {
                    b.HasOne("WebApplicationTestTask.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("WebApplicationTestTask.Entities.OrderProduct", b =>
                {
                    b.HasOne("WebApplicationTestTask.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplicationTestTask.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebApplicationTestTask.Entities.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
